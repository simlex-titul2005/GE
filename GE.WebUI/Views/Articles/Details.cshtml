@using SX.WebCore.Providers;
@using SX.WebCore;

@model VMArticle
@{
    var title = ViewBag.Title;
    var h1 = ViewBag.H1;
    ViewBag.Title = title ?? Model.Title;
    ViewBag.H1 = ViewBag.H1 ?? ViewBag.Title;
    ViewBag.Description = ViewBag.Description ?? Model.Foreword;
    ViewBag.PageImage = Model.FrontPictureId.HasValue && Model.ShowFrontPictureOnDetailPage
        ? Url.ContentAbsUrl(Url.Action("Picture", "Pictures", new { id = Model.FrontPictureId }))
        : Model.Videos.Length > 0
        ? SxVideoProvider.GetVideoImageUrl(Model.Videos[0].VideoId, SxVideoProvider.VideoQuality.Medium)
        : null;
    var banners = (SxVMBanner[])ViewBag.PageBanners;
    SxVMBanner banner = null;
}

<div class="detail-article">
    @Html.SxBreadcrumbs((SxVMBreadcrumb[])ViewBag.Breadcrumbs)

    @Html.Partial("_Foreword", Model)

    <div class="m-html">
        @Html.Action("Popular", "News", new { mct = Model.ModelCoreType, mid = Model.Id, amount = 4, value = 1 })
        @if (Model.FrontPictureId.HasValue && Model.ShowFrontPictureOnDetailPage)
        {
            <img class="f-picture" alt="@Model.Title" src="@Url.Action("Picture", "Pictures", new { id= Model.FrontPictureId })" />
        }
        @Html.Raw(Model.Html)


        @Html.SxShareButtons(lbSettings: new SxExtantions.SxLikeButtonsSettings
   {
       LikeDownCount = () => Model.LikeDownCount,
       LikeUpCount = () => Model.LikeUpCount,
       UrlUp = () => Url.Action("AddLike", "Articles", new { mid = Model.Id, ld = "true" }),
       UrlDown = () => Url.Action("AddLike", "Articles", new { mid = Model.Id, ld = "false" })
   })
    </div>

    @Html.Partial("_MaterialInfo", Model)

    @*aphorisms*@
    <div id="aphorisms">
        @{Html.RenderAction("Random", "Aphorism"); }
    </div>

    @Html.Action("SimilarMaterials", "Articles", new { MaterialId = Model.Id, ModelCoreType = Model.ModelCoreType, amount = 9 })

    @{
        banner = banners != null ? banners.SingleOrDefault(x => x.Place == SX.WebCore.DbModels.SxBanner.BannerPlace.Intermediate) : null;
        if (banner != null)
        {
            if (!(Equals(banner.Type, SxBanner.BannerType.Google) && Request.IsLocal) || Equals(banner.Type, SX.WebCore.DbModels.SxBanner.BannerType.Html))
            {
                <div style="margin-top:30px;">
                    @Html.SxBanner(banner, (b) => Url.Action("Picture", "Pictures", new { id = b.PictureId }), b => { return Url.Action("Click", "Banners", new { bannerId = b.Id }); })
                </div>
            }
        }
    }

    @if (Model.MaterialTags.Any())
    {
        @Html.Partial("_TagsCloud", Model.MaterialTags, new ViewDataDictionary { { "TagsShowHeader", true }, { "TagsMaxFs", 30 }, { "ControllerName", "Articles" }, { "ActionName", "List" } })
    }

    <div id="by-date-mat">
        @Html.Action("ByDateMaterial", "Articles", new { mid = Model.Id, mct = Model.ModelCoreType })
    </div>

    <br />
    @Html.Action("Edit", "Comments", new { mid = Model.Id, mct = Model.ModelCoreType })

</div>

@section scripts{
    <script src="@Url.Action("Js", "StaticContent", new { name="jquery.unobtrusive-ajax"})"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name="jquery.validate"})"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name="jquery.validate.unobtrusive"})"></script>
    <script type="text/javascript" src="~/Content/dist/js/currency-provider.min.js"></script>
    <script type="text/javascript" src="~/Content/dist/js/ge-aphorisms.min.js"></script>
    <script src="~/Scripts/sxshare.js"></script>
    <script type="text/javascript">
        loadScriptOnce('https://www.youtube.com/iframe_api');
        $(function () {
            $('#aphorisms').geAphorisms();
            $('section[id^="comments-"]').load('/comments/list?mid=' +@Model.Id +'&mct=' + '@Model.ModelCoreType');
        });
    </script>
}