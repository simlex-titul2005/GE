@model VMEditAphorism
@{
    var isNew = Model.Id == 0;
    ViewBag.Title = isNew ? "Добавить афоризм" : "Редактировать афоризм \"" + Model.Title + "\"";
    ViewBag.AuthorAphorism = isNew || !Model.AuthorId.HasValue ? null : Model.Author.Name;
}

<h2>@ViewBag.Title</h2>
@if (!isNew)
{
    <div class="text-right">
        <form method="post" action="@Url.Action("delete", new { controller="Aphorisms", cat=Model.CategoryId, id=Model.Id, mct=Enums.ModelCoreType.Aphorism })">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-danger" onclick="if (!confirm('Удалить запись?')) { return false;}">Удалить афоризм</button>
        </form>
    </div>
}
<br />
<form method="post" action="@Url.Action("edit")">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.CategoryId)

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.Title, new { @class = "control-label" })
                @Html.EditorFor(x => x.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите заголовок" } })
                @Html.ValidationMessageFor(x => x.Title)
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.Show, new { @class = "control-label" })
                @Html.EditorFor(x => x.Show, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Show)
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.AuthorId, new { @class = "control-label" })
                @Html.EditorFor(x => x.AuthorId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.AuthorId)
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.SourceUrl, new { @class = "control-label" })
                @Html.EditorFor(x => x.SourceUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.SourceUrl)
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Html, new { @class = "control-label" })
        @Html.EditorFor(x => x.Html, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите содержание" } })
        @Html.ValidationMessageFor(x => x.Html)
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">@(isNew ? "Добавить" : "Сохранить")</button>
        @Html.ActionLink("Назад", "index", new{controller= "Aphorisms", curCat= Model.CategoryId }, new { @class = "btn btn-default" })
    </div>
</form>

@section scripts{
    <script type="text/javascript" src="~/bower_components/ckeditor/ckeditor.js"></script>
    <script type="text/javascript">
        if (CKEDITOR.instances['Html']) {
            CKEDITOR.remove(CKEDITOR.instances['Html']);
        }
        CKEDITOR.replace('Html', { height: 400 });
    </script>
}