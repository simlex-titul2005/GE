@model VMMaterialCategory
@{
    var isNew = Model.Id == null;
    ViewBag.Title = isNew ? "Добавить категорию" : "Редактировать категорию \"" + Model.Title + "\"";
    var forAphorism = Model.ModelCoreType == ModelCoreTypeProvider[nameof(Aphorism)];
}
@section styles{
    <link href="@Url.Action("Css", "StaticContent", new { name= "lightbox", area="" })" rel="stylesheet" />
}
<h2>@ViewBag.Title </h2>
@if (!isNew)
{
    <div class="form-group">
        <div class="text-right">
            <form method="post" action="@Url.Action("Delete", "MaterialCategories")">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(x => x.Id)
                @Html.HiddenFor(x => x.ModelCoreType)
                <button type="submit" class="btn btn-danger" onclick="if (!confirm('Удалить запись?')) return false;">Удалить</button>
            </form>
        </div>
    </div>
}
<form method="post" action="@Url.Action("Edit", "MaterialCategories")" autocomplete="off">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.ParentId)
    @Html.HiddenFor(x => x.ModelCoreType)
    @if (!isNew)
    {
        @Html.HiddenFor(x => x.OldId)
    }
    @if (!isNew && !User.IsInRole("architect"))
    {
        @Html.HiddenFor(x => x.Id)
    }
    @if (!isNew && User.IsInRole("architect"))
    {
        <div class="form-group">
            @Html.LabelFor(x => x.Id, new { @class = "control-label" })
            <span class="text-info"> (не должен содержать кириллицы и любых знаков, кроме тире)</span>
            @Html.EditorFor(x => x.Id, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите идентификатор категории" } })
            @Html.ValidationMessageFor(x => x.Id)
        </div>
    }
    <div class="form-group">
        @Html.LabelFor(x => x.Title, new { @class = "control-label" })
        @Html.EditorFor(x => x.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите название категории" } })
        @Html.ValidationMessageFor(x => x.Title)
    </div>

    @if (forAphorism)
    {
    <div class="form-group">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(x => x.FrontPictureId, new { @class = "control-label" })
                    @Html.EditorFor(x => x.FrontPictureId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Выберите изображение" } })
                    @Html.ValidationMessageFor(x => x.FrontPictureId)
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(x => x.GameId, new { @class = "control-label" })
                @Html.EditorFor(x => x.GameId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.GameId)
            </div>
        </div>
    </div>
    }
    else
    {
        <div class="form-group">
            @Html.LabelFor(x => x.FrontPictureId, new { @class = "control-label" })
            @Html.EditorFor(x => x.FrontPictureId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Выберите изображение" } })
            @Html.ValidationMessageFor(x => x.FrontPictureId)
        </div>
    }

    <div class="form-group">
        <button type="submit" class="btn btn-primary">@(isNew ? "Добавить" : "Сохранить")</button>
        @Html.ActionLink("Назад", "Index", "MaterialCategories", new { mct = Model.ModelCoreType }, new { @class = "btn btn-default" })
    </div>
</form>
@section scripts{
    <script src="@Url.Action("Js", "StaticContent", new { name = "lightbox",  area="" })"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name = "jquery.validate",  area="" })"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name = "jquery.validate.unobtrusive",  area="" })"></script>
    <script>
        $(function () {
            var glPictures = new SxGridLookup('#FrontPictureId');
            var glGames = new SxGridLookup('#GameId');
        });
    </script>
}
