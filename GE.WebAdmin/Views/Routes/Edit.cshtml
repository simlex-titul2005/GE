@model VMEditRoute

<h2>@(Model.Id != Guid.Empty ? "Редактирование маршрута" : "Добавление маршрута")</h2>

<form method="post" action="edit" class="form">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)

    <div class="row">
        <div class="col-md-12">
            <!--name-->
            <div class="form-group">
                @Html.LabelFor(x => x.Name, new { @class = "control-label" })
                @Html.EditorFor(x => x.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите наименование маршрута" } })
                @Html.ValidationMessageFor(x => x.Name)
            </div>
            <!--domain-->
            <div class="form-group">
                @Html.LabelFor(x => x.Domain, new { @class = "control-label" })
                <div class="input-group">
                    @Html.EditorFor(x => x.Domain, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите домен" } })
                    <span class="input-group-btn">
                        <button class="btn btn-default" type="button" onclick="$('#Domain').val('')">Очистить</button>
                    </span>
                </div>
                @Html.ValidationMessageFor(x => x.Domain)
            </div>
            <!--controller-->
            <div class="form-group">
                @Html.LabelFor(x => x.Controller, new { @class = "control-label" })
                @Html.EditorFor(x => x.Controller, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите контроллер" } })
                @Html.ValidationMessageFor(x => x.Controller)
            </div>
            <!--action-->
            <div class="form-group">
                @Html.LabelFor(x => x.Action, new { @class = "control-label" })
                @Html.EditorFor(x => x.Action, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите действие" } })
                @Html.ValidationMessageFor(x => x.Action)
            </div>
        </div>

        <div class="col-md-12">
            @if (Model.Id != Guid.Empty)
            {
                <!--route values-->
                <div id="route-@Model.Id">
                    @Html.Partial(MVC.RouteValues.Views._RouteValues, new VMRouteValueList { RouteId = Model.Id, Values = Model.Values })
                </div>
                <!--route values-->}
            else
            {
                <p class="text-info">Редактирование пунктов меню доступно только только при наличии меню в базе данных.</p>
            }
        </div>

    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">@(Model.Id == Guid.Empty ? "Добавить" : "Сохранить")</button>
        @Html.RouteLink("Назад", new { action = "Index" }, new { @class = "btn btn-default" })
        <button type="button" class="btn btn-danger pull-right">Удалить</button>
    </div>
</form>

@section scripts{
    <script type="text/javascript" src="~/Content/dist/js/routes.min.js"></script>
}